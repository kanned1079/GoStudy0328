package main

// Golang仍然有面向对象编程的继承，封装和多态的特性
// 只是实现的方式和其它00P语言不一样

// 封装(encapsulation)就是把抽象出的--字段和对字段的操作封装在一起--
// 数据被保护在内部 程序的其它包只有通过被授权的操作(方法) 才能对字段进行操作。

// 封装的理解和好处 1.隐藏实现细节 1.提可以对数据进行验证，保证安全合理
// 如何体现封装 1.对结构体中的属性进行封装 1.通过方法，包 实现封装

// 封裝的實現步驟
// 1. 将结构体、字段(属性)的首字母小写(不能导出了，其它包不能使用类似private)
// 2. 给结构体所在包提供一个工厂模式的函数，首字母大写。类似一个构造函数
// 3. 提供一个首字母大写的Set方法(类似其它语言的public)，用于对属性判断并赋值
// 		func (var 结构体类型名) Setxxx(参数列表)(返回值列表) {
//			加入数据验证的业务逻辑
//			var.字段=参数
//		}
// 4. 提供一个首字母大写的Get方法(类似其它语言的public)，用于获取属性的值
//		func (var结构体类型名) Getxxx(){
//			return var.字段:
// 		{

type Person_36 struct {
}

func main() {

}
